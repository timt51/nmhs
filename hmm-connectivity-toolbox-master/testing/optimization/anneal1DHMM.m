function [tr1_trained, tr2_trained, em1_trained, em2_trained, logL] = ...
         anneal1DHMM(tr1_guess, tr2_guess, em1_guess, em2_guess, seq1, seq2, logFile, varargin)
  %  args:
  %      tr1_guess and tr2_guess are conntected markov matrices
  %      em1_guess and em2_guess are markov emission matrices
  %      seq1 and seq2 are the observed emissions of the two processes being
  %          modeled
  %
  %  optargs:
  %      guess1D: if true, the 'guess' model for SA will be generated by
  %          running hmmtrain on seq1 and seq2.
  %      time_limit: time, in seconds, that the simulation will run for
  %      func_evals: maximum number of times the goal function will be evaluated
  %          before simulation terminates
  %
  %  outputs:
  %      tr1_trained and tr2_trained are connected markov matrices representing
  %          the best model found by the simulation
  %      em1_trained and em2_trained are the corresponding emission matrices

  global sa_trajectory;
  numvarargs = length(varargin);
  if numvarargs > 2
    error('anneal1DHMM:TooManyInputs', ...
          'requires at most 3 optional inputs');
  end

  % set defaults for optional inputs
  optargs = {90000, 90000};

  % now put these defaults into the valuesToUse cell array,
  % and overwrite the ones specified in varargin.
  optargs(1:numvarargs) = varargin;

  % Place optional args in memorable variable names
  [time_limit, func_evals] = optargs{:};

  initSATrajectory();
  options = saoptimset('DataType', 'custom', 'AnnealingFcn', @permute1DHMM, ...
                       'MaxFunEvals', func_evals, 'TimeLimit', time_limit, 'TolFun',1e-10);

  %run simulated annealing on 1d trained model
  packed_model = pack1DHMM(tr1_guess, tr2_guess, em1_guess, em2_guess);
  %log start time
  begin = cputime;
  try
    trained_model = simulannealbnd(@(model, data)hmm1D_fitness(model, {seq1, seq2}), packed_model, [], [], options, logFile);
  catch exc
    display('WARNING: simulated annealing threw an exception')
    disp(getReport(exc))
    disp(exc.message)
    disp(exc.identifier)
  end
  %log end time
  elapsed = cputime-begin;

  logL = -hmm1D_fitness(trained_model, {seq1, seq1});
  
  [tr1_trained, tr2_trained, em1_trained, em2_trained] = unpack1DHMM(trained_model);

